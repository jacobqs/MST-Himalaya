# TODO:

- edit region_model.rst
- edit repositories.rst
- edit future_tutorial.rst

In ../notebooks/nea-example/run_nea_nidelva.html#2.-Configuration-of-a-SHyFT-simulation provide a bit more information on the models (PTGSK, etc.), probably need a shyft_models.rst

Further integration of Yisak's notebooks to: ../notebooks/nea-example/advanced_simulation.ipynb

Add information on set_state_collection to file:../notebooks/nea-example/run_nea_nidelva.html#Visualing-the-Snow-Cover-Area-of-all-cells-for-a-certain-point-in-time


# Comments:

Would argue that several of from region_model_repo:
 '_catch_ids',
 '_data_file',
 '_epsg',
 '_limit',
 '_mask',
 '_mconf',
 '_rconf',
 '_region_model',
 'bounding_box',
 'get_region_model']
could be exposed... why is epsg private? data_file? region_model?


Why does the initial_state_repo for a PTGSK model have skaugen snow in the name map?
In [64]: initial_state_repo.name_map
Out[64]:
{'gamma_snow': 'gs',
 'hbv_snow': 'hs',
 'kirchner': 'kirchner',
 'skaugen_snow': 'ss'}

In [65]: initial_state_repo.model
Out[65]: shyft.api.pt_gs_k._pt_gs_k.PTGSKModel

Q: is the geo_ts_repo redundant from the api.ARegionEnvironment? No. One is python repository, the other is part of the api

In the advanced tutorial it is very confusing that we are starting with a simulator... we need to skip this and create the region_model straight from scratch.



Installation Text:

Clone the repositories
-----------------------

Shyft is distributed in three separate code repositories: The main code base `shyft <https://gitlab.com/shyft-os/shyft>`_. A second repository (required for tests) is located at `shyft-data <https://gitlab.com/shyft-os/shyft-data>`_. A third repository `shyft-doc <https://gitlab.com/shyft-os/shyft-doc>`_ is available containing example notebooks and tutorials. The three repositories assume they have been checked out in parallel into a ``shyft_workspace`` directory::

    bash
    mkdir shyft_workspace && cd shyft_workspace
    export SHYFT_WORKSPACE=`pwd`
    git clone https://gitlab.com/shyft-os/shyft.git
    git clone https://gitlab.com/shyft-os/shyft-data.git
    git clone https://gitlab.com/shyft-os/shyft-doc.git


Building with Cmake
--------------------

On many linux systems, it is easy to simply use our `cmake <https://cmake.org/>`_ approach. In order to do this, however, a few additional requirements must be fulfilled:

- A C++1y compiler (gcc-5 or higher)
- The BLAS and LAPACK libraries (development packages)
- A Python3 (3.4 or higher) interpreter
- The NumPy package (>= 1.8.0)
- The netCDF4 package (>= 1.2.1)
- The CMake building tool (2.8.7 or higher)

Once you've satisfied the above requirements you should be able to simply ``cd shyft`` into the Shyft repository and::

   $ python setup.py build_ext --inplace

This will call a script ``build_api_cmake.sh`` from the main `Shyft repository <https://gitlab.com/shyft-os/shyft>`_.

.. seealso:: If you have problems with dependencies, be sure to see the notes within the ``build_api.sh`` regarding the library paths.


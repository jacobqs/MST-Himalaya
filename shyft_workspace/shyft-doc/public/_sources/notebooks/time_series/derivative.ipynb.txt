{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ts.derivative\n",
    "\n",
    "### ts.derivative() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "# first you should import the third-party python modules which you'll use later on\n",
    "# the first line enables that figures are shown inline, directly in the notebook\n",
    "%pylab inline\n",
    "import os\n",
    "from os import path\n",
    "import sys\n",
    "from matplotlib import pyplot as plt\n",
    "import datetime as dt\n",
    "import numpy as np\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from shyft.time_series import Calendar\n",
    "from shyft.time_series import deltahours\n",
    "from shyft.time_series import TimeAxis\n",
    "from shyft.time_series import point_interpretation_policy as fx_policy\n",
    "from shyft.time_series import DoubleVector\n",
    "from shyft.time_series import TsVector\n",
    "from shyft.time_series import TimeSeries\n",
    "from shyft.time_series import derivative_method\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fbca4024cc0>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x864 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# demo ts.derivative\n",
    "\n",
    "utc = Calendar()\n",
    "t0 = utc.time(2016, 9, 1)\n",
    "delta = 2\n",
    "n = 7*24\n",
    "\n",
    "ta = TimeAxis(t0, delta, n)\n",
    "\n",
    "# generate a source ts, with some spikes, to demonstrate the response of the filter\n",
    "ts_values = np.arange(n,dtype=np.float64)\n",
    "ts_values[:]=0.0\n",
    "ts_values[0]=2.0\n",
    "ts_values[10] = 2.0\n",
    "ts_values[11] = 1.9\n",
    "ts_values[12] = 1.8\n",
    "ts_values[13] = 1.7\n",
    "ts_values[14] = 1.6\n",
    "ts_values[15] = 1.5\n",
    "ts_values[16] = 1.4\n",
    "ts_values[17] = 1.3\n",
    "ts_values[18:19] = 1.2\n",
    "ts_values[30:-1] = 1.5\n",
    "ts_values[40:45] = 1.0\n",
    "ts_values[55:65] = 0.2\n",
    "\n",
    "a = TimeSeries(ta=ta, values=DoubleVector.from_numpy(ts_values), point_fx=fx_policy.POINT_AVERAGE_VALUE)\n",
    "\n",
    "da = a.derivative() # default derivative_method.CENTER\n",
    "da_fwd = a.derivative(method=derivative_method.FORWARD)\n",
    "da_bwd = a.derivative(method=derivative_method.BACKWARD)\n",
    "\n",
    "b = TimeSeries(ta=ta, values=DoubleVector.from_numpy(ts_values), point_fx=fx_policy.POINT_INSTANT_VALUE)\n",
    "b.set(13,float('nan')) # insert a nan into the sequence\n",
    "db = b.derivative() # linear, always using segments derivateive\n",
    "\n",
    "# now this is done, - we can now plot the results\n",
    "common_timestamps = [dt.datetime.utcfromtimestamp(p.start) for p in ta]\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12,12))\n",
    "plt.subplot(411)\n",
    "plt.step(common_timestamps, a.values, label='a(stair-case)',color='orange') \n",
    "plt.legend(loc=1)\n",
    "plt.subplot(412)\n",
    "plt.step(common_timestamps, da.values, label='a.derivative(center)',color='black')\n",
    "plt.legend(loc=1)\n",
    "plt.subplot(413)\n",
    "plt.step(common_timestamps, da_fwd.values, label='a.derivative(fwd)',color='blue')\n",
    "plt.step(common_timestamps, da_bwd.values, label='a.derivative(bwd)',color='green')\n",
    "plt.legend(loc=1)\n",
    "plt.subplot(414)\n",
    "plt.plot(common_timestamps, b.values, label='b(linear)',color='orange') \n",
    "plt.step(common_timestamps, db.values, label='b.derivative()',color='black')\n",
    "plt.legend(loc=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,\n",
       "        1.  , -0.05, -0.05,   nan,   nan, -0.05, -0.05, -0.05, -0.05,\n",
       "       -0.6 ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,\n",
       "        0.  ,  0.  ,  0.75,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,\n",
       "        0.  ,  0.  ,  0.  , -0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,\n",
       "        0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,\n",
       "       -0.65,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,\n",
       "        0.  ,  0.65,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,\n",
       "        0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,\n",
       "        0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,\n",
       "        0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,\n",
       "        0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,\n",
       "        0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,\n",
       "        0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,\n",
       "        0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,\n",
       "        0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,\n",
       "        0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,\n",
       "        0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,\n",
       "        0.  ,  0.  ,  0.  ,  0.  , -0.75,   nan])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db.values.to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 2. , 1.9, 1.8,\n",
       "       nan, 1.6, 1.5, 1.4, 1.3, 1.2, 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\n",
       "       0. , 0. , 0. , 0. , 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5,\n",
       "       1.5, 1. , 1. , 1. , 1. , 1. , 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5,\n",
       "       1.5, 1.5, 1.5, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2,\n",
       "       1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5,\n",
       "       1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5,\n",
       "       1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5,\n",
       "       1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5,\n",
       "       1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5,\n",
       "       1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5,\n",
       "       1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5,\n",
       "       1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 0. ])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.values.to_numpy()"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
